---
title: "DEF_2.0"
author: "CFP"
format: html
editor: visual
---

```{r}
gc()
setwd("~/Desktop/U_CHILE/MG_BIOESTADÍSTICA/TESIS/DATOS PÚBLICOS/DEF_DEIS")
  
library(tidyverse)
library(readr)
library(kableExtra)
library(summarytools)
```

# 0. Carga y administración de datos previa

```{r eval=FALSE}
## no correr otra vez, por eso el eval=F
def_1990_2021 <- read_csv("def_1990_2021.csv")
def_2022_2025 <- read_csv("def_2022_2025.csv") #considerar que estos no están verificados (validación) aún
```

```{r eval=F}
## no correr otra vez, por eso el eval=F
def.1 <- def_1990_2021 %>%
  ## dar formato a las variables
  mutate(
    V1 = as.numeric(V1),
    V2 = as.Date(V2),
    V3 = as.factor(V3),
    V4 = as.factor(V4),
    V5 = as.numeric(V5),
    V6 = as.numeric(V6),
    V7 = as.factor(V7),
    V8 = as.factor(V8),
    V9 = as.factor(V9),
    V10 = as.factor(V10),
    V11 = as.factor(V11),
    V12 = as.factor(V12),
    V13 = as.factor(V13),
    V14 = as.factor(V14),
    V15 = as.factor(V15),
    V16 = as.factor(V16),
    V17 = as.factor(V17)) %>%
  ## filtar las codificaciones que no corresponden a CG
  filter(V12 == "C15-C26") %>%
  filter(V9 == "C169") %>%
  ## renombrar variables
  rename(
    AÑO_DEF = V1,
    FECHA_DEF = V2,
    SEXO = V3,
    EDAD_TIPO = V4,
    EDAD = V5,
    CODIGO_COMUNA = V6,
    COMUNA = V7,
    REGION = V8,
    CODIGO_CIE10 = V9,
    CAUSA_CIE.10 = V10,
    CAUSA_DEF = V11,
    GRUPO_CIE10 = V12,
    GRUPO_CAUSA_DEF = V13,
    CATEG_DEF = V14,
    DIAG_DEF = V15,
    CATEG_CAUSA_DEF = V16,
    SUBCATEG_CAUSA_DEF = V17  ) %>%
  dplyr::select(1:17)
```

```{r eval=FALSE}
## no correr otra vez, por eso el eval=F
def.2 <- def_2022_2025 %>%
  ## dar formato a las variables
  mutate(
    V1 = as.numeric(V1),
    V2 = as.Date(V2),
    V3 = as.factor(V3),
    V4 = as.factor(V4),
    V5 = as.numeric(V5),
    V6 = as.numeric(V6),
    V7 = as.factor(V7),
    V8 = as.factor(V8),
    V9 = as.factor(V9),
    V10 = as.factor(V10),
    V11 = as.factor(V11),
    V12 = as.factor(V12),
    V13 = as.factor(V13),
    V14 = as.factor(V14),
    V15 = as.factor(V15),
    V16 = as.factor(V16),
    V17 = as.factor(V17)     ) %>%
  ## filtar las codificaciones que no corresponden a CG
   filter(V12 == "C15-C26") %>%
   filter(V9 == "C169") %>%
  ## renombrar variables
   rename(
     AÑO_DEF = V1,
     FECHA_DEF = V2,
     SEXO = V3,
     EDAD_TIPO = V4,
     EDAD = V5,
     CODIGO_COMUNA = V6,
     COMUNA = V7,
     REGION = V8,
     CODIGO_CIE10 = V9,
     CAUSA_CIE.10 = V10,
     CAUSA_DEF = V11,
     GRUPO_CIE10 = V12,
     GRUPO_CAUSA_DEF = V13,
     CATEG_DEF = V14,
     DIAG_DEF = V15,
     CATEG_CAUSA_DEF = V16,
     SUBCATEG_CAUSA_DEF = V17) %>%
 dplyr::select(1:17)
```

```{r}
## juntar defunciones en un solo objeto
# 75741 + 8999 = 84740, numero de filas del df final


# defunciones <- rbind(def.1, def.2) %>%

## las proyecciones ine estan desde 2002
#   filter(AÑO_DEF >= 2002)


## Carga de datos Servicio de Salud
ServSalud <- read_csv("ServSalud.csv") 

## crear variable SS. SOLO CORRER ESTE CHUNK TAL COMO ESTA (NO QUITAR LOS #s)
ServSalud<- ServSalud %>%
  rename(CODIGO_COMUNA = regCom,
         Servicio_salud = `Nombre Dependencia Jerárquica (SEREMI / Servicio de Salud)`) %>%
  dplyr::select(Servicio_salud, CODIGO_COMUNA, `Nombre Comuna`)

## no correr otra vez estas ultimas líneas

## unión de BBDD (ESTO YA ESTÁ HECHO)
# master_def <- inner_join(defunciones, ServSalud, by = "CODIGO_COMUNA")

## Dejar esta base como .cSv (ESTO YA ESTÁ HECHO)
# write_csv(master_def, "BASE_DEFUNCIONES.csv")
```

```{r eval=F}
#rm( def_1990_2021, def_2022_2025, def.1, def.2, defunciones, ServSalud )
```

# 1. Carga y administración de datos

```{r message=F}
## Base de datos con todas las defunciones por año y SS creada en las líneas de código previas. Como de esas solo se usará un archivo .csv, se crea en un documento aparte y se carga en vez de ejecutar todas las líneas de código previas cada vez.

master.base <- read_csv("BASE_DEFUNCIONES.csv")

## Creacion variable quinquenio (Trabajar con la variable edad y función cut)

master.base <- master.base %>%

## creaciónde la variable QUINQUENIO mediante la categorización de variable cuantitativa EDAD
  mutate(QUINQUENIO = 
           cut(EDAD,
      
## número de cortes (breaks) que se hará en la variable EDAD (RECORDAR: los breaks son siempre labels + 1)
      breaks = c(0,4,9,14,19,24,29,34,39,44,49,54,59,64,69,74,79, 115),

## etiquetas que recibirán los cortes que se realizados. Esta nomenclatura es la stantander usada por DEIS e INE.
      labels = c(
        "0-4",      #(0-4]
        "5-9",      #(5-9]
        "10-14",    #(10-14]
        "15-19",    #(15-19] 
        "20-24",    #(20-24]
        "25-29",    #(25-29]
        "30-34",    #(30-34]
        "35-39",    #(35-39]
        "40-44",    #(40-44]
        "45-49",    #(45-49]
        "50-54",    #(50-54]
        "55-59",    #(55-59]
        "60-64",    #(60- 64]
        "65-69",    #(65-69]
        "70-74",    #(70- 74]
        "75-79",    #(75-79]
        "80 y más"  #(80 y mas(
      ),
## En el intervalo más pequeño (0-4), incluir el límite inferior, de esta forma la edad 0 queda incluida.
   include.lowest = TRUE
  )
)

## hay que reagrupar por mediana, terciles y cuartiles para el modelaje posterior.

## ( mediana <- median(master.base$EDAD) )
## ( terciles <- quantile(master.base$EDAD, probs = c(1/3, 2/3)) )
## ( cuartiles <- quantile(master.base$EDAD, probs = c(0.25, 0.5, 0.75)) ) 

master.base <- master.base %>%
  mutate(
    EDAD_MEDIANA = cut (EDAD, breaks = c(0 , 72, 115), labels = c("0-72", "72 y mas"), right = T), 
    EDAD_TERCIL = cut (EDAD, breaks = c(0 , 66, 77, 115), labels = c("0-66", "67-77", "78 y más")),
    EDAD_CUARTIL = cut (EDAD, breaks = c(0 , 63, 72, 80, 115), labels = c("0-63", "64-72", "73-80", "mayor 80"))
  )

```

```{r eval = F}
## resumen de la base de datos
summarytools::dfSummary(master.base)
levels(master.base$QUINQUENIO)
```

# 2. Defunciones brutas

## 2.1 Por año y SS

```{r}
## Conteo de defunciones a causa de CG por año y SS.

def.1 <- master.base %>%
  
  ## agrupar las filas por AÑO y Servicio de salud
  group_by(AÑO_DEF, Servicio_salud) %>%
  
  ## resumir los grupos en la suma de la filas de estos (grupos)
  summarise(defunciones = n()) %>%

  ## pasar a formato wide (ancho)
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)

## hacer este df como tabla
tabla.def.1 <- kable(def.1) %>%
## Estilo de la tabla  
  kable_styling(
    bootstrap_options = "striped") %>%
## añadido de título
  add_header_above(c("Frecuencia absoluta de defunciones por CG en SS, 2002-2025" = 30)) %>%
## añadido de pie de página
  add_footnote(c("Tabla obtenida a partir de la información publicada por DEIS para los periodos 1990-2021 y 2022-2025"), 
               notation = "number")


## Para el trabajo posterior es mas eficiente trabajar la base de datos en formato long (largo)

def.1.long <- def.1 %>%
  ##pasar a long
  pivot_longer(
    
    ## columnas que de pasarán a long
    cols = -AÑO_DEF,
    
    ## nueva columna que contendra la información almacenada en cols (grupos)
    names_to = "Servicio_salud",
    
    ## nombre de la columna que almacenara los valores especificados en las celdas
    values_to = "Defunciones") %>%
  
  # Ordenar las filas por los valores de la segunda columna (Servicio_salud)
  arrange(Servicio_salud) %>%  
  
  ## Ordenar el df para que la columna Servicio_salud quede en primer lugar.
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conserrvacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025)) 

## %in% es un operador lógico para comparar si X está contenido (%in%) en Y, entonces devuelve un vector que indica para cada elemento de x si está contenido en y.
 
# tabla.def.1

# save_kable(x=tabla.def.1, 
           #file="tabla.def.1.png")
```

## 2.2 Por año, SS y Sexo

```{r}
## Conteo de defunciones a causa de CG por año, SS y sexo.

def.2 <- master.base %>%
  
  ## cambiar codificación del sexo
  mutate(SEXO =recode(SEXO,  ## recodificación de los niveles de la variable sexo.se cambiará por Hombre cuando el nivel sea 1 y por Mujer cuando el nivel sea 2
                      "Hombre" = 1, 
                      "Mujer" = 2)) %>%
  
  ## agrupar segpun año, sexo y SS
  group_by(AÑO_DEF, Servicio_salud, SEXO) %>%
  
  ## resumir la información como la suma de las filas para los agrupamientos
  summarise(defunciones = n()) %>%
  
## pasar a wide
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)

## hacer este df como tabla
tabla.def.2 <- kable(def.2) %>%
## Estilo de la tabla  
  kable_styling(
    bootstrap_options = "striped") %>%
## añadido de título
  add_header_above(c("Frecuencia absoluta de defunciones por CG segun sexo en SS, 2002-2025" = 31)) %>%
## añadido de pie de página
  add_footnote(c("Tabla obtenida a partir de la información publicada por DEIS para los periodos 1990-2021 y 2022-2025"), 
               notation = "number")

## pasar el df def.2 a formato long
def.2.long <- def.2 %>%
   ## Pasar a long
  pivot_longer(
    
    ## columnas que no pasarán a formato long
    cols = -c(AÑO_DEF, SEXO),
    
    ## nombre de la nueva variable que alamcenará la información de cols
    names_to = "Servicio_salud",
    
    ## nombre de la nueva vairable que almacenará la información contenida en cada celda
    values_to = "Defunciones") %>%
  
  ## Ordenar por SS y SEXO
  arrange(Servicio_salud, SEXO) %>%  
  
  ## Seleccionar la variable servicion de salud como la primera de la base de datos
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conserrvacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025))
  


# tabla.def.2

# save_kable(x=tabla.def.2, 
           #file="tabla.def.2.png")


```

## 2.3 Por año, sexo y quinquenio, según SS

```{r message=F}
## Conteo de defunciones a causa de CG por año SS, sexo y quinquenio.


def.3 <- master.base %>%
  
  ## agrupar por AÑO, servicio de salud, sexo y quinquenio
  group_by(AÑO_DEF, Servicio_salud, SEXO, QUINQUENIO) %>%
  
  ## resumir la infromación en el conteo de filas de los agrupamientos previo
  summarise(defunciones = n()) %>%
  
## pasar a wide
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)

## hacer este df como tabla
tabla.def.3 <- kable(def.3) %>%
## Estilo de la tabla  
  kable_styling(
    bootstrap_options = "striped") %>%
## añadido de título
  add_header_above(c("Frecuencia absoluta de defunciones por CG segun sexo y quinquenio en SS, 2002-2025" = 32)) %>%
## añadido de pie de página
  add_footnote(c("Tabla obtenida a partir de la información publicada por DEIS para los periodos 1990-2021 y 2022-2025"), 
               notation = "number")

# tabla.def.3


## pasar el df def.3 a formato long
def.3.long <- def.3 %>%
   ## P1 pasar a long
  pivot_longer(
    
    ## columnas que no pasarán a formato long
    cols = -c(AÑO_DEF, SEXO, QUINQUENIO),
    
    ## nombre de la nueva variable que contendrá la información especificada en cols
    names_to = "Servicio_salud",
    
    ## nombre de la varibale que contendra la información presente en las celdas
    values_to = "Defunciones") %>%
  
  ## ordenar las filas segun servicio de salud y sexo
  arrange(Servicio_salud, SEXO) %>%  
  
  ## ordenar el df para que la variable servicio de salud quede en primer lugar
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conservacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025))

```

## 2.4 Por año, sexo y EDAD_MEDIANA, según SS

```{r}
def.4 <- master.base %>%
  
  ## agrupar por AÑO, servicio de salud, sexo y quinquenio
  group_by(AÑO_DEF, Servicio_salud, SEXO, EDAD_MEDIANA) %>%
  
  ## resumir la infromación en el conteo de filas de los agrupamientos previo
  summarise(defunciones = n()) %>%
  
## pasar a wide
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)


## pasar el df def.4 a formato long
def.4.long <- def.4 %>%
   ## P1 pasar a long
  pivot_longer(
    
    ## columnas que no pasarán a formato long
    cols = -c(AÑO_DEF, SEXO, EDAD_MEDIANA),
    
    ## nombre de la nueva variable que contendrá la información especificada en cols
    names_to = "Servicio_salud",
    
    ## nombre de la varibale que contendra la información presente en las celdas
    values_to = "Defunciones") %>%
  
  ## ordenar las filas segun servicio de salud y sexo
  arrange(Servicio_salud, SEXO) %>%  
  
  ## ordenar el df para que la variable servicio de salud quede en primer lugar
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conserrvacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025))

### esta estructura de datos me serviría para modelar la rim ya que no hay 0 en las defunciones
```

## 2.5 Por año, sexo y EDAD_TERCIL, según SS

```{r}
def.5 <- master.base %>%
  
  ## agrupar por AÑO, servicio de salud, sexo y quinquenio
  group_by(AÑO_DEF, Servicio_salud, SEXO, EDAD_TERCIL) %>%
  
  ## resumir la infromación en el conteo de filas de los agrupamientos previo
  summarise(defunciones = n()) %>%
  
## pasar a wide
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)


## pasar el df def.4 a formato long
def.5.long <- def.5 %>%
   ## P1 pasar a long
  pivot_longer(
    
    ## columnas que no pasarán a formato long
    cols = -c(AÑO_DEF, SEXO, EDAD_TERCIL),
    
    ## nombre de la nueva variable que contendrá la información especificada en cols
    names_to = "Servicio_salud",
    
    ## nombre de la varibale que contendra la información presente en las celdas
    values_to = "Defunciones") %>%
  
  ## ordenar las filas segun servicio de salud y sexo
  arrange(Servicio_salud, SEXO) %>%  
  
  ## ordenar el df para que la variable servicio de salud quede en primer lugar
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conserrvacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025))

### esta estructura de datos me NO serviría para modelar la rim ya que no hay 0 en las defunciones
```

## 2.6 Por año, sexo y EDAD_CUARTIL, según SS

```{r}
def.6 <- master.base %>%
  
  ## agrupar por AÑO, servicio de salud, sexo y quinquenio
  group_by(AÑO_DEF, Servicio_salud, SEXO, EDAD_CUARTIL) %>%
  
  ## resumir la infromación en el conteo de filas de los agrupamientos previo
  summarise(defunciones = n()) %>%
  
## pasar a wide
  pivot_wider(names_from = Servicio_salud,
              values_from = defunciones)


## pasar el df def.4 a formato long
def.6.long <- def.6 %>%
   ## P1 pasar a long
  pivot_longer(
    
    ## columnas que no pasarán a formato long
    cols = -c(AÑO_DEF, SEXO, EDAD_CUARTIL),
    
    ## nombre de la nueva variable que contendrá la información especificada en cols
    names_to = "Servicio_salud",
    
    ## nombre de la varibale que contendra la información presente en las celdas
    values_to = "Defunciones") %>%
  
  ## ordenar las filas segun servicio de salud y sexo
  arrange(Servicio_salud, SEXO) %>%  
  
  ## ordenar el df para que la variable servicio de salud quede en primer lugar
  dplyr::select(Servicio_salud, everything()) %>%
  
  ## filtrar la columna AÑO_DEF conserrvacion las filas que no contienen estos años
  filter(!AÑO_DEF %in% c(2020, 2021, 2022, 2023, 2024, 2025))

### esta estructura de datos me NO serviría para modelar la rim ya que no hay 0 en las defunciones
```

# 3. Tasas de defunción

## 3.1. Añadir las poblaciones para cada SS y sexo, para cada año.

```{r message=F}
## carga de datos de las proyecciones poblaciones (INE) por comuna y por comuna sexo

POBLACIONES_COMUNA <- read_csv("~/Desktop/U_CHILE/MG_BIOESTADÍSTICA/TESIS/DATOS PÚBLICOS/PROYECCIONES_POBLACIONALES/PROYECCION_COMUNA.csv")

POBLACIONES_COMUNA_SEXO <- read_csv("~/Desktop/U_CHILE/MG_BIOESTADÍSTICA/TESIS/DATOS PÚBLICOS/PROYECCIONES_POBLACIONALES/PROYECCION_COMUNA_SEXO.csv")
```

## 3.2 tasas de mortalidad de CG por 100.000 habitantes por año en SS.

```{r}
## Añadir a este df la variable de SS. (LISTO)

P_C <- POBLACIONES_COMUNA %>%
  
## variable que contiene el nombre comun del código de comuna en este script.
  mutate(CODIGO_COMUNA = Comuna) %>%
  
  ## Descartar columnas que no se usarán
  dplyr::select(-starts_with("Poblacion 202")) %>%
  dplyr::select(-starts_with("Poblacion 203"))

## añadir variable SS
P_C <- inner_join(P_C, ServSalud, by = "CODIGO_COMUNA") 

P_C <- P_C %>%
  dplyr::select(-CODIGO_COMUNA, -`Nombre Comuna`, -Comuna) %>%
  
  ## agrupar según servicio de salud
  group_by(Servicio_salud) %>%
  
  ## Resumir información en la suma de las columnas
  summarise(across(starts_with("Poblacion"), sum)) %>%
  
  ## Dar formato long al df
  pivot_longer(
    #columnas a pasar a formato largo
    cols = starts_with("Poblacion"), # aquellas columnas que empiezan con población
    #nueva columna creada a partir de cols
    names_to = "AÑO",
    #nombre de la columa a crear a partir de los datos de las celdas
    values_to = "POBLACION" ) %>%
  
  ## La variable año remover el string "Poblacion" y dejando solo el año en formato numeric
  mutate(AÑO = as.numeric(str_remove(AÑO, "Poblacion "))) 

##este df contiene las poblaciones para cada ss en cada año.

## tasa de defunciones de CG por 100.000 habitantes según SS
tasa.def <- bind_cols(def.1.long, P_C)

tasa.def  <- tasa.def %>%
  ## creación columna de tasas
  mutate(tasa =round( (Defunciones / POBLACION) * 100000,2) ) %>%
  
  ## descartar columnas duplicadas
  dplyr::select(`Servicio_salud...1`, AÑO_DEF, Defunciones, POBLACION, tasa) %>%
  
  ## renombar variable de SS
  rename(Servicio_salud = `Servicio_salud...1`)
```

## 3.3 tasas de mortalidad de CG según sexo por 100.000 habitantes por año en SS.

```{r}
## revisar con SFA si las tasas según sexo serán necesarias.

P_CS <- POBLACIONES_COMUNA_SEXO %>%
  
## variable que contiene el nombre comun del código de comuna en este script.
  mutate(CODIGO_COMUNA = Comuna) %>%
  
  ## Descartar columnas que no se usarán
  dplyr::select(-starts_with("Poblacion 202")) %>%
  dplyr::select(-starts_with("Poblacion 203")) %>%
  
  ## renombrar el SEXO (1=hombre; 2= mujer)
  rename(SEXO = `Sexo\r\n1=Hombre\r\n2=Mujer` )

P_CS <- inner_join(P_CS, ServSalud, by = "CODIGO_COMUNA")

P_CS <- P_CS %>%
  dplyr::select(-CODIGO_COMUNA, -`Nombre Comuna`, -Comuna) %>%
  ## agrupar datos segun SS y sexo
  group_by(Servicio_salud, SEXO) %>%
  
  ## resumir valores de las columnas en la suma
  summarise(across(starts_with("Poblacion"), sum)) %>%
  
  ## llevar de df a formato long
  pivot_longer(
    #columnas a pasar a formato largo
    cols = starts_with("Poblacion"), # aquellas columnas que empiezan con población
    #nueva columna creada a partir de cols
    names_to = "AÑO",
    #nombre de la columa a crear a partir de los datos de las celdas
    values_to = "POBLACION" ) %>%
  
  ## en la variable año remover el string "Poblacion" y dejando solo el año en formato numeric
  mutate(AÑO = as.numeric(str_remove(AÑO, "Poblacion "))) 


## creación df con defunciones y poblacion por año y sexo
tasa.def.sexo <- bind_cols(def.2.long, P_CS)

tasa.def.sexo  <- tasa.def.sexo %>%
  ## creación columna de tasas
  mutate(tasa =round( (Defunciones / POBLACION) * 100000,2) )%>%
  
  ## descratar columnas duplicadas
  dplyr::select(`Servicio_salud...1`, AÑO_DEF,, `SEXO...3`, Defunciones, POBLACION, tasa) %>%
  
  ## renombrar SS y SEXO
  rename(Servicio_salud = `Servicio_salud...1`,
         SEXO = `SEXO...3`)
```

# 4. Graficos tasas de mortalidad.

```{r fig.width=38, fig.height=25}
mortalidad.plot <- ggplot(tasa.def, # df de donde se obtienen los datos
       aes(x = AÑO_DEF,                     # eje x : variable AÑO
           y = tasa,                    # eje y: varibale tasa
           group = Servicio_salud,      # agrupar por la variables Servicio_salud
           color = Servicio_salud)) +   # color segun Servicio_salud
  geom_smooth(method = "lm",
              se = F,
              linetype = "solid",
              colour = "#8B8878",
              alpha = 0.05,
              linewidth = 0.6) +
  geom_line() +                         # Línea de incidencia por año
  geom_point() +                        # Puntos para visualizar las tasas
  facet_wrap(~ Servicio_salud, 
             scales = "free_y", # Un gráfico por servicio de salud
             ncol = 5) +  
  theme_minimal() +
  scale_x_continuous(breaks = unique(tasa.def$AÑO_DEF)) +
  theme(legend.position = "none",   # Oculta la leyenda porque cada faceta es un servicio
     panel.grid.major.y = element_line(color = "gray80"),  ## añadir linea que identifique el eje Y
     panel.grid.minor.y = element_line(color = "gray90"),  
     axis.line.y = element_line(color = "black"))+
  
  labs(title = "Tasa de mortalidad de GC por 100000 habitantes, según Servicio de Salud", 
       x = "Año", 
       y = "Tasa de mortalidad")

mortalidad.plot
```

```{r eval=T}
## exportar figura
ggsave("mortalidad.jpeg", 
  mortalidad.plot, 
  width = 38, 
  height = 25, 
  dpi = 300)

```

#5. Pirámides poblacionales de tasas de incidencia por tramo, sexo y SS

```{r}

## def.3 es el df que tiene la información de mortalidad por tramo, sexo y quinquenio
## hay que aladirle la información de SS

levels(def.3.long$QUINQUENIO)


## Carga de datos poblacion por quinquenio, sexo y comuna
POBLACIONES_COMUNA_SEXO_QUINQUENIO <- read_csv("~/Desktop/U_CHILE/MG_BIOESTADÍSTICA/TESIS/DATOS PÚBLICOS/PROYECCIONES_POBLACIONALES/PROYECCION_COMUNA_QUINQUENIO_SEXO.csv") 



POBLACIONES_COMUNA_SEXO_QUINQUENIO <- POBLACIONES_COMUNA_SEXO_QUINQUENIO %>%
  mutate(QUINQUENIO = as.factor(quinquenio),
         SEXO = as.factor(`Sexo\r\n1=Hombre\r\n2=Mujer`)) %>%
  dplyr::select(-quinquenio, -`Sexo\r\n1=Hombre\r\n2=Mujer`)

# levels(POBLACIONES_COMUNA_SEXO_QUINQUENIO$QUINQUENIO)
 
## añadir la variable SS al de df de poblaciones por comuna, sexo y quinquenio.
P_C_S_Q <- POBLACIONES_COMUNA_SEXO_QUINQUENIO %>%
  
## variable que contiene el nombre comun del código de comuna en este script.
  mutate(CODIGO_COMUNA = Comuna) %>%
  
  ## Descartar columnas que no se usarán
  dplyr::select(-starts_with("Poblacion 202")) %>%
  dplyr::select(-starts_with("Poblacion 203"))

## añadir variable SS
P_C_S_Q <- inner_join(P_C_S_Q, ServSalud, by = "CODIGO_COMUNA") 


P_C_S_Q <- P_C_S_Q %>%
  dplyr::select(-CODIGO_COMUNA, -`Nombre Comuna`, -Comuna) %>%
  
  ## agrupar según servicio de salud
  group_by(Servicio_salud, SEXO, QUINQUENIO) %>%
  
  ## Resumir información en la suma de las columnas
  summarise(across(starts_with("Poblacion"), sum)) %>%
  
  ## Dar formato long al df
  pivot_longer(
    #columnas a pasar a formato largo
    cols = starts_with("Poblacion"), # aquellas columnas que empiezan con población
    #nueva columna creada a partir de cols
    names_to = "AÑO",
    #nombre de la columa a crear a partir de los datos de las celdas
    values_to = "POBLACION" ) %>%
  
  ## La variable año remover el string "Poblacion" y dejando solo el año en formato numeric
  mutate(AÑO = as.numeric(str_remove(AÑO, "Poblacion ")),
         
         ## cambiar los niveles de SEXO 1 = hombre, 2 = mujer
         SEXO = fct_recode(SEXO, 
                               "Hombre" = "1",
                               "Mujer" = "2")) 
  
def.3.long <- def.3.long %>%
  rename( AÑO = AÑO_DEF)

## unir bases de datos P_C_S_Q y def.3.long
tasa.def.sexo.quin.com <- left_join(def.3.long, P_C_S_Q, by = c("Servicio_salud",
                                                                 "SEXO",
                                                                 "QUINQUENIO",
                                                                 "AÑO"))

tasa.def.sexo.quin.com <- tasa.def.sexo.quin.com %>%
  mutate(tasa = round((Defunciones/ POBLACION)*100000,2))

```

```{r eval = F}
## ya se corrió. no volver a correr.

## df con las defunciones de todas las combinaciones de datos.

defunciones2 <- tasa.def.sexo.quin.com

## obtener todas las combinaciones:
completo <- expand.grid(
  AÑO_DEF = unique(master.base$AÑO_DEF),
  Servicio_salud = unique(master.base$Servicio_salud),
  SEXO = unique(master.base$SEXO),
  QUINQUENIO = unique(master.base$QUINQUENIO)
)

completo <- completo  %>%
  rename(AÑO = AÑO_DEF)

defunciones2<- left_join(completo, defunciones2,
                                   by = c("AÑO",
                                          "Servicio_salud", 
                                          "SEXO", 
                                          "QUINQUENIO"))


defunciones2 <- defunciones2 %>%
  dplyr::select(
    Servicio_salud, AÑO, SEXO, QUINQUENIO, Defunciones) %>%
  write_csv("defunciones2_oe2.csv")

```

```{r eval=F}
## chunk ya corrido

## eliminar filas con valores NA en df de defunciones. Esto es para fines de los gráficos. pero las salidas de datos, si necesito saber cuando es NA.
tasa.def.sexo.quin.com <- tasa.def.sexo.quin.com %>%
  drop_na(tasa)

# Transformar los datos para que los hombres tengan valores negativos (necesario para la gráfica)
tasa.def.sexo.quin.com$tasa_modificada <- ifelse(tasa.def.sexo.quin.com$SEXO == "Hombre", 
                                          -tasa.def.sexo.quin.com$tasa, 
                                           tasa.def.sexo.quin.com$tasa)


# Listar todos los servicios de salud y años únicos
servicios <- unique(tasa.def.sexo.quin.com$Servicio_salud)
años <- unique(tasa.def.sexo.quin.com$AÑO)

# Crear una carpeta  en la ruta de trabajo para guardar los gráficos generados
dir.create("graficos_piramides", 
           showWarnings = FALSE)


## creación de gráfico con bucle for anidado para cada combinación de servicio y año

for (servicio in servicios) {      ## para cada servicio en el objeto servicios
  for (año in años) {              ## y para cada año en el obsejto años
    
    ## Filtrar los datos para el servicio y año específicos
       # en cada iteración de los bucles, datos_filtrados es un subconjunto filtrado por la combinación de Servicio_alud y AÑO de la iteración que este corriendo en el momento
       # subset crea un nuevo df que contienen las condiciones especificadas, es decir filtra los SS y AÑO que no correspondan el servicio y año de la iteracion que está corriendo.
    
    datos_filtrados <- subset(tasa.def.sexo.quin.com, ## elsu
                              Servicio_salud == servicio & 
                                AÑO == año)
    
    # Crear el gráfico
    p <- ggplot(data = datos_filtrados) +
      
      geom_bar(aes(x = QUINQUENIO, 
                   y = tasa_modificada, 
                   fill = SEXO), 
               stat = "identity") +
      
      scale_y_continuous(breaks = seq(-1000, 600, 30),
                         labels = abs(seq(-1000, 600, 30))) +
      
      ## voltear los ejer
      coord_flip() +
      
      ## título eje y
      ylab("Tasa de mortalidad de CG por 100000 habitantes") +
      
      ## titulo eje x
      xlab("Quinquenios de edad") +
      
      ## titulo del gráfico
      ## revisar la sintaxis de paste() para entender el código.
      # paste(x1, x2, x3..., sep = " algo ") por default sep = " " separa por un espacio
      ggtitle(paste("Piramide Poblacional:", 
                    servicio,
                    "-", # este guión se utiliza para separar el nombre del servicio y el año en el título del gráfico
                    año)) + 
      
      ## tema del grpafico
      theme_minimal() +
      
      ## especificaciones del tema
      theme(axis.title = element_text(size = 10, 
                                      face = "bold"))
    
    ## Guardar los gráficos en un archivo
    ggsave(paste0("graficos_piramides/", 
                  servicio, "_", 
                  año, ".jpeg"), 
           plot = p,    ## el grafico p que está iterando
           height = 8,  ## altura del grpafico
           width = 10)  ## anchura del grpafico
  }
}
```

```{r}
## Esto es para la shiny, aun no.

## hacer un gráifco de piramide pobacional con las def por año. hacerlo como grid.
## esto lo puedo hacer con ggplot. neceisto un df con las columnas sexo, edad y la población para cada combinación
```

```{r eval=FALSE}
#  archivo fue llevado a la carpeta del oe2
defunciones <- tasa.def.sexo.quin.com %>%
  dplyr::select(Servicio_salud, AÑO, SEXO, QUINQUENIO, Defunciones)  %>%
  write_csv("defunciones_oe2.csv")
```
